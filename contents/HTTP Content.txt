HTTP
HTTP is defined by IETF RFCs and IANA registries.
HTTP HISTORY
	HTTP RESOURCES
	HTTP FUNDAMENTALS
	HTTP RESOURCE ADDRESSING
	
	HTTP REQUEST METHODS
	 -are methods used by clients to request some resources to the server. And every request has a corresponding response.
	There are 8 standard methods in HTTP it includes the GET, HEAD, POST (from HTTP/1.0), PUT, DELETE, OPTIONS, TRACE and CONNECT method (from HTTP/1.1). And recently PATCH method were added and it was determined by RFC 5789.
		
		GET - request data from a pa resource.
			
		HEAD - similar as the GET method but the only difference is it only returns the HTTP headers or the metadata.
		
		POST - performs submission of data to a particular resource to be processed.
		
		PUT - create or replace something. It uploads a report of the specified URI.
		
		DELETE - removes the target resource.
		
		OPTIONS - recommends more choices that the server supports.

		TRACE - used for testing/diagnosing of the response or request chain.

		CONNECT - establishes a tunnel to the destination origin master

		PATCH - provides partial changes to a resource.
		
		
		
		
		<p>
    
    Standard Methods
	Get 
	-commonly used method ,transfer current selected presenatations of the target resource--retrieved
	-must be upported by all compliant general purposes

	Head
	-identical to get,but thr resoutrces are not transfer
	-get only the status code,does not display the html or the message body
	-Use to retrieve metadata

	POST
	-unsafe/non idempotent
	-request that the target perform resource

	PUT
	-create or replace the state of the tarfet resource with teh state

	DELETE
	-remove the association between the atrget source and its current funstionality

 	Option
	-what are the operations available

	Trace
	-allows the request of an echo
	-request a remote,application-level loop back of the request message the recipient to echo back to the client 
   	the recieved request message
	-typically used for testing/diagnostics of the request/response chain

	Chunked encoding
	-sent info in chunks	
	-left- attribute
  </p>
		
	HTTP RESPONSE METHODS	
	
	
	METHOD PROPERTIES
		Safe Methods - read only semantics
			(GET, HEAD, OPTION, TRACE)
		Idempotent Methods - multiple identical request
			(GET, HEAD, OPTION, TRACE, PUT, DELETE)
		Cacheable Methods - response to method that allows to be stored with reverse feature.
			(GET, HEAD, POST)
			
	HTTP MESSAGE HEADER FIELDS
		General header: used by both client and server
		Request header: used only by clients
		Response header: used only by server
		Entity header: referred to an entity.
<<<<<<< HEAD
<<<<<<< HEAD
		
	HEADERS CLASSIFICATION
	
	/**	Headers can be grouped according to their contexts:

			General header: Headers applying to both requests and responses but with no relation to the data eventually transmitted in the body.
			Request header: Headers containing more information about the resource to be fetched or about the client itself.
			Response header: Headers with additional information about the response, like its location or about the server itself (name and version etc.).
			Entity header: Headers containing more information about the body of the entity, like its content length or its MIME-type. **/

		Headers can also be grouped according to how proxies handle them:

			End-to-end headers
			These headers must be transmitted to the final recipient of the message; that is, the server for a request or the client for a response. Intermediate proxies must retransmit end-to-end headers unmodified and caches must store them.
			Hop-by-hop headers
			These headers are meaningful only for a single transport-level connection and must not be retransmitted by proxies or cached. Such headers are: Connection, Keep-Alive, Proxy-Authenticate, Proxy-Authorization, TE, Trailer, Transfer-Encoding and Upgrade. Note that only hop-by-hop headers may be set using the Connection general header.
=======
>>>>>>> 2afb1dad27835b4c1e032b598e8a5e44af15c3a7
=======
>>>>>>> 2afb1dad27835b4c1e032b598e8a5e44af15c3a7

	HTTP headers by their usage category
	
	Authentication

		WWW-Authenticate
		Defines the authentication method that should be used to gain access to a resource.
		Authorization
		Contains the credentials to authenticate a user agent with a server.
		Proxy-Authenticate
		Defines the authentication method that should be used to gain access to a resource behind a Proxy server.
		Proxy-Authorization
		Contains the credentials to authenticate a user agent with a proxy server.

	Caching

		Age
		The time in seconds the object has been in a proxy cache.
		Cache-Control
		Specifies directives for caching mechanisms in both requests and responses.
		Expires
		The date/time after which the response is considered stale.
		Pragma
		Implementation-specific header that may have various effects anywhere along the request-response chain. Used for backwards compatibility with HTTP/1.0 caches where the Cache-Control header is not yet present.
		Warning
		A general warning field containing information about possible problems.

	Client hints

		Accept-CH
		...
		Content-DPR
		...
		DPR
		...
		Downlink
		...
		Save-Data
		...
		Viewport-Width
		...
		Width
		...
		
	Conditionals

		Last-Modified
		It is a validator, the last modification date of the resource, used to compare several versions of the same resource. It is less accurate than ETag, but easier to calculate in some environments. Conditional requests using If-Modified-Since and If-Unmodified-Since use this value to change the behavior of the request.
		ETag
		It is a validator, a unique string identifying the version of the resource. Conditional requests using If-Match and If-None-Match use this value to change the behavior of the request.
		If-Match
		Makes the request conditional and applies the method only if the stored resource matches one of the given ETags.
		If-None-Match
		Makes the request conditional and applies the method only if the stored resource doesn't match any of the given ETags. This is used to update caches (for safe requests), or to prevent to upload a new resource when one is already existing.
		If-Modified-Since
		Makes the request conditional and expects the entity to be transmitted only if it has been modified after the given date. This is used to transmit data only when the cache is out of date.
		If-Unmodified-Since
		Makes the request conditional and expects the entity to be transmitted only if it has not been modified after the given date. This is used to ensure the coherence of a new fragment of a specific range with previous ones, or to implement an optimistic concurrency control system when modifying existing documents.

		Connection management

		Connection
		Controls whether the network connection stays open after the current transaction finishes.
		Keep-Alive
		Controls how long a persistent connection should stay open.
	
	Content negotiation

		Accept
		Informs the server about the types of data that can be sent back. It is MIME-type.
		Accept-Charset
		Informs the server about which character set the client is able to understand.
		Accept-Encoding
		Informs the server about the encoding algorithm, usually a compression algorithm, that can be used on the resource sent back.
		Accept-Language
		Informs the server about the language the server is expected to send back. This is a hint and is not necessarily under the full control of the user: the server should always pay attention not to override an explicit user choice (like selecting a language in a drop down list).

	Controls

		Expect
		Indicates expectations that need to be fulfilled by the server in order to properly handle the request.
		Max-Forwards
		...

	Cookies

		Cookie
		Contains stored HTTP cookies previously sent by the server with the Set-Cookie header.
		Set-Cookie
		Send cookies from the server to the user agent.
		Cookie2 
		Used to contain an HTTP cookie, previously sent by the server with the Set-Cookie2 header, but has been obsoleted by the specification. Use Cookie instead.
		Set-Cookie2 
		Used to send cookies from the server to the user agent, but has been obsoleted by the specification. Use Set-Cookie instead.
	
	CORS

		Access-Control-Allow-Origin
		Indicates whether the response can be shared.
		Access-Control-Allow-Credentials
		Indicates whether the response to the request can be exposed when the credentials flag is true.
		Access-Control-Allow-Headers
		Used in response to a preflight request to indicate which HTTP headers can be used when making the actual request.
		Access-Control-Allow-Methods
		Specifies the method or methods allowed when accessing the resource in response to a preflight request.
		Access-Control-Expose-Headers
		Indicates which headers can be exposed as part of the response by listing their names.
		Access-Control-Max-Age
		Indicates how long the results of a preflight request can be cached.
		Access-Control-Request-Headers
		Used when issuing a preflight request to let the server know which HTTP headers will be used when the actual request is made.
		Access-Control-Request-Method
		Used when issuing a preflight request to let the server know which HTTP method will be used when the actual request is made.
		Origin
		Indicates where a fetch originates from.
		Timing-Allow-Origin
		Specifies origins that are allowed to see values of attributes retrieved via features of the Resource Timing API, which would otherwise be reported as zero due to cross-origin restrictions.
		
	Do Not Track

		DNT
		Used for expressing the user's tracking preference.
		Tk
		Indicates the tracking status that applied to the corresponding request.
		
	Downloads

		Content-Disposition
		Is a response header if the resource transmitted should be displayed inline (default behavior when the header is not present), or it should be handled like a download and the browser should present a 'Save As' window.
		
	Message body information

		Content-Length
		indicates the size of the entity-body, in decimal number of octets, sent to the recipient.
		Content-Type
		Indicates the media type of the resource.
		Content-Encoding
		Used to specify the compression algorithm.
		Content-Language
		Describes the language(s) intended for the audience, so that it allows a user to differentiate according to the users' own preferred language.
		Content-Location
		Indicates an alternate location for the returned data.
	
	Proxies

		Forwarded
		Contains information from the client-facing side of proxy servers that is altered or lost when a proxy is involved in the path of the request.
		X-Forwarded-For 
		Identifies the originating IP addresses of a client connecting to a web server through an HTTP proxy or a load balancer.
		X-Forwarded-Host 
		Identifies the original host requested that a client used to connect to your proxy or load balancer.
		X-Forwarded-Proto 
		identifies the protocol (HTTP or HTTPS) that a client used to connect to your proxy or load balancer.
		Via
		Added by proxies, both forward and reverse proxies, and can appear in the request headers and the response headers.
	
	Redirects

	Location
	Indicates the URL to redirect a page to.

	Request context

		From
		Contains an Internet email address for a human user who controls the requesting user agent.
		Host
		Specifies the domain name of the server (for virtual hosting), and (optionally) the TCP port number on which the server is listening.
		Referrer
		The address of the previous web page from which a link to the currently requested page was followed.
		Referrer-Policy
		Governs which referrer information sent in the Referrer header should be included with requests made.
		User-Agent
		Contains a characteristic string that allows the network protocol peers to identify the application type, operating system, software vendor or software version of the requesting software user agent. See also the Firefox user agent string reference.
	
	Response context

		Allow
		Lists the set of HTTP request methods support by a resource.
		Server
		Contains information about the software used by the origin server to handle the request.
	
	Range requests

		Accept-Ranges
		Indicates if the server supports range requests and if so, in which unit the range can be expressed.
		Range
		Indicates the part of a document that the server should return.
		If-Range
		Creates a conditional range request that is only fulfilled if the given tag or date matches the remote resource. Used to prevent downloading two ranges from incompatible version of the resource.
		Content-Range
		Indicates where in a full body message a partial message belongs.
		
	Security

		Content-Security-Policy (CSP)
		Controls resources the user agent is allowed to load for a given page.
		Content-Security-Policy-Report-Only
		Allows web developers to experiment with policies by monitoring (but not enforcing) their effects. These violation reports consist of JSON documents sent via an HTTP POST request to the specified URI.
		Expect-CT
		Allows sites to opt in to reporting and/or enforcement of Certificate Transparency requirements, which prevents the use of misused certificates for that site from going unnoticed. When a site enables the Expect-CT header, they are requesting that Chrome check that any certificate for that site appears in public CT logs.
		Public-Key-Pins (HPKP)
		Associates a specific cryptographic public key with a certain web server to decrease the risk of MITM attacks with forged certificates.
		Public-Key-Pins-Report-Only
		Sends reports to the report-uri specified in the header and does still allow clients to connect to the server even if the pinning is violated.
		Strict-Transport-Security (HSTS)
		Force communication using HTTPS instead of HTTP.
		Upgrade-Insecure-Requests
		Sends a signal to the server expressing the client’s preference for an encrypted and authenticated response, and that it can successfully handle the upgrade-insecure-requests directive.
		X-Content-Type-Options
		Disables MIME sniffing and forces browser to use the type given in Content-Type.
		X-Frame-Options (XFO)
		Indicates whether a browser should be allowed to render a page in a <frame>, <iframe> or <object>
		X-XSS-Protection
		Enables cross-site scripting filtering.
	
	Server-sent events

		Ping-From
		...
		Ping-To
		...
		Last-Event-ID
		...
		Transfer coding

		Transfer-Encoding
		Specifies the the form of encoding used to safely transfer the entity to the user.
		TE
		Specifies the transfer encodings the user agent is willing to accept.
		Trailer
		Allows the sender to include additional fields at the end of chunked message.
		WebSockets

		Sec-WebSocket-Key
		...
		Sec-WebSocket-Extensions
		...
		Sec-WebSocket-Accept
		...
		Sec-WebSocket-Protocol
		...
		Sec-WebSocket-Version
		...
	Other

		Date
		Contains the date and time at which the message was originated.
		Expect-CT
		Allows sites to opt in to reporting and/or enforcement of Certificate Transparency requirements.
		Large-Allocation
		Tells the browser that the page being loaded is going to want to perform a large allocation.
		Link
		...
		Retry-After
		Indicates how long the user agent should wait before making a follow-up request.
		SourceMap
		Links generated code to a source map.
		Upgrade
		The relevant RFC document for the Upgrade header field is RFC 7230, section 6.7.  The standard establishes rules for upgrading or changing to a different protocol on the current client, server, transport protocol connection.  For example, this header standard allows a client to change from HTTP 1.1 to HTTP 2.0, assuming the server decides to acknowledge and implement the Upgrade header field.  Neither party is required to accept the terms specified in the Upgrade header field.  It can be used in both client and server headers.  If the Upgrade header field is specified, then the sender MUST also send the Connection header field with the upgrade option specified.  For details on the Connection header field please see section 6.1 of the aforementioned RFC.
		Vary
		Determines how to match future request headers to decide whether a cached response can be used rather than requesting a fresh one from the origin server.
		X-DNS-Prefetch-Control
		Controls DNS prefetching, a feature by which browsers proactively perform domain name resolution on both links that the user may choose to follow as well as URLs for items referenced by the document, including images, CSS, JavaScript, and so forth.
		X-Firefox-Spdy
		...
		X-Requested-With
		...
		X-UA-Compatible
	
	

		Accept
		Accept-Charset
		Accept-Encoding
		Accept-Language
		Accept-Ranges
		Access-Control-Allow-Credentials
		Access-Control-Allow-Headers
		Access-Control-Allow-Methods
		Access-Control-Allow-Origin
		Access-Control-Expose-Headers
		Access-Control-Max-Age
		Access-Control-Request-Headers
		Access-Control-Request-Method
		Age
		Allow
		Authorization
		Cache-Control
		Connection
		Content-Disposition
		Content-Encoding
		Content-Language
		Content-Length
		Content-Location
		Content-Range
		Content-Security-Policy
		Content-Security-Policy-Report-Only
		Content-Type
		Cookie
		Cookie2
		DNT
		Date
		ETag
		Expect
		Expect-CT
		Expires
		Forwarded
		From
		Host
		If-Match
		If-Modified-Since
		If-None-Match
		If-Range
		If-Unmodified-Since
		Keep-Alive
		Large-Allocation
		Last-Modified
		Location
		Origin
		Pragma
		Proxy-Authenticate
		Proxy-Authorization
		Public-Key-Pins
		Public-Key-Pins-Report-Only
		Range
		Referer
		Referrer-Policy
		Retry-After
		Server
		Set-Cookie
		Set-Cookie2
		SourceMap
		Strict-Transport-Security
		TE
		Timing-Allow-Origin
		Tk
		Trailer
		Transfer-Encoding
		Upgrade-Insecure-Requests
		User-Agent
		Vary
		Via
		WWW-Authenticate
		Warning
		X-Content-Type-Options
		X-DNS-Prefetch-Control
		X-Forwarded-For
		X-Forwarded-Host
		X-Forwarded-Proto
		X-Frame-Options
		X-XSS-Protection
<<<<<<< HEAD
<<<<<<< HEAD
	
	
	HTTP STATUS CODE (SERVER FAULT)
	
=======
=======
>>>>>>> 2afb1dad27835b4c1e032b598e8a5e44af15c3a7
		
		
		
	HTTP EXTENSIONS
	
	HTTP STATUS RESPONSE CODE
>>>>>>> 2afb1dad27835b4c1e032b598e8a5e44af15c3a7
		Information responses
		
			100 Continue

			101 Switching Protocol

			102 Processing (WebDAV)


		Successful responses
		
			200 OK

			201 Created

			202 Accepted

			203 Non-Authoritative Information

			204 No Content

			205 Reset Content

			206 Partial Content

			207 Multi-Status (WebDAV)

			208 Multi-Status (WebDAV)

			226 IM Used (HTTP Delta encoding)
			
		Redirection messages
			
			300 Multiple Choice
			 
			301 Moved Permanently
			 
			302 Found
			 
			303 See Other
			 
			304 Not Modified
			 
			305 Use Proxy 
			 
			306 unused
			 
			307 Temporary Redirect
			 
			308 Permanent Redirect
			 
		Client error responses
		
			400 Bad Request
			 
			401 Unauthorized
			 
			402 Payment Required
			 
			403 Forbidden
			 
			404 Not Found
			 
			405 Method Not Allowed
			 
			406 Not Acceptable
			 
			407 Proxy Authentication Required
			 
			408 Request Timeout
			 
			409 Conflict
			 
			410 Gone
			 
			411 Length Required
			 
			412 Precondition Failed
			 
			413 Payload Too Large
			 
			414 URI Too Long
			 
			415 Unsupported Media Type
			 
			416 Requested Range Not Satisfiable
			 
			417 Expectation Failed
			 
			418 I'm a teapot
			 
			421 Misdirected Request
			 
			422 Unprocessable Entity (WebDAV)
			 
			423 Locked (WebDAV)
			 
			424 Failed Dependency (WebDAV)
			 
			426 Upgrade Required
			 
			428 Precondition Required
			 
			429 Too Many Requests
			 
			431 Request Header Fields Too Large
			 
			451 Unavailable For Legal Reasons
			 
		Server error responses
		
			500 Internal Server Error
			 
			501 Not Implemented
			 
			502 Bad Gateway
			 
			503 Service Unavailable
			 
			504 Gateway Timeout
			 
			505 HTTP Version Not Supported
			 
			506 Variant Also Negotiates
			 
			507 Insufficient Storage
			 
			508 Loop Detected (WebDAV)
			 
			510 Not Extended
			 
			511 Network Authentication Required
			
			
HTTP EXTENSIONS

